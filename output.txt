total: 9370

better-ui/
  tsconfig.node.json
  run.ipynb
  postcss.config.cjs
  README.md
  yarn.lock
  tailwind.config.cjs
  .gitignore
  package.json
  vite-env.d.ts
  components.json
  tsconfig.json
  obfuscate.js
  vite.config.ts
  showcase.mov
  output.txt
  public/
    manifestv3.json
    vite.svg
    manifest.json
  src/
    utils.ts
    background/
      vite.chrome.background.config.ts
      background.ts
      background.html
    popup/
      popup.html
    content-script/
      index.tsx
      App.tsx
      vite.content.config.ts
      index.css
    components/
      ResponsiveOverlay.tsx
      Floater.tsx
      ComboBox.tsx
      CodeBlockButton.tsx
      TextAreaControl.tsx
      ControlComponent.tsx
      ui/
        popover.tsx
        command.tsx
        dialog.tsx
        button.tsx

---

```
// .gitignore
# Logs logs *.log npm-debug.log* yarn-debug.log* yarn-error.log* pnpm-debug.log* lerna-debug.log* node_modules dist dist-ssr *.local # Editor directories and files .vscode/* !.vscode/extensions.json .idea .DS_Store *.suo *.ntvs* *.njsproj *.sln *.sw? 
```

---

```cjs
// postcss.config.cjs
module.exports = { plugins: { tailwindcss: {}, autoprefixer: {}, } }
```

---

```css
/* src/content-script/index.css
@tailwind base; @tailwind components; @tailwind utilities; @layer base { :root { --background: 0 0% 100%; --foreground: 222.2 84% 4.9%; --muted: 210 40% 96.1%; --muted-foreground: 215.4 16.3% 46.9%; --popover: 0 0% 100%; --popover-foreground: 222.2 84% 4.9%; --card: 0 0% 100%; --card-foreground: 222.2 84% 4.9%; --border: 214.3 31.8% 91.4%; --input: 214.3 31.8% 91.4%; --primary: 222.2 47.4% 11.2%; --primary-foreground: 210 40% 98%; --secondary: 210 40% 96.1%; --secondary-foreground: 222.2 47.4% 11.2%; --accent: 210 40% 96.1%; --accent-foreground: 222.2 47.4% 11.2%; --destructive: 0 84.2% 60.2%; --destructive-foreground: 210 40% 98%; --ring: 215 20.2% 65.1%; --radius: 0.5rem; } .dark { --background: 222.2 84% 4.9%; --foreground: 210 40% 98%; --muted: 217.2 32.6% 17.5%; --muted-foreground: 215 20.2% 65.1%; --popover: 222.2 84% 4.9%; --popover-foreground: 210 40% 98%; --card: 222.2 84% 4.9%; --card-foreground: 210 40% 98%; --border: 217.2 32.6% 17.5%; --input: 217.2 32.6% 17.5%; --primary: 210 40% 98%; --primary-foreground: 222.2 47.4% 11.2%; --secondary: 217.2 32.6% 17.5%; --secondary-foreground: 210 40% 98%; --accent: 217.2 32.6% 17.5%; --accent-foreground: 210 40% 98%; --destructive: 0 62.8% 30.6%; --destructive-foreground: 0 85.7% 97.3%; --ring: 217.2 32.6% 17.5%; } } @layer base { * { @apply border-border; } body { @apply bg-background text-foreground; } } 
```

---

```html
// src/background/background.html
<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8" /> <title>Vite + React + TS</title> </head> <body> <script type="module" src="./background.ts"></script> </body> </html>
```

---

```html
// src/popup/popup.html
<!doctype html> <html lang="en"> <head> <meta charset="UTF-8" /> <title>betterUI</title> </head> <body> <h1>betterUI Popup</h1> </body> </html> 
```

---

```javascript
// obfuscate.js
const JavaScriptObfuscator = require('javascript-obfuscator'); const fs = require('fs'); const path = require('path'); function obfuscateFile(filePath) { const fileContent = fs.readFileSync(filePath, 'UTF-8'); const obfuscationResult = JavaScriptObfuscator.obfuscate(fileContent); fs.writeFileSync(filePath, obfuscationResult.getObfuscatedCode()); } function walkDir(dir) { const files = fs.readdirSync(dir); files.forEach(file => { const filePath = path.join(dir, file); const stat = fs.statSync(filePath); if (stat.isDirectory()) { walkDir(filePath); } else if (stat.isFile() && path.extname(filePath) === '.js') { obfuscateFile(filePath); } }); } walkDir('dist'); 
```

---

```json
// tsconfig.node.json
{ "compilerOptions": { "composite": true, "module": "ESNext", "moduleResolution": "Node", "allowSyntheticDefaultImports": true }, "include": ["vite.config.ts"] } 
```

---

```json
// components.json
{ "$schema": "https: "style": "new-york", "rsc": false, "tsx": true, "tailwind": { "config": "tailwind.config.cjs", "css": "src/content-script/index.css", "baseColor": "slate", "cssVariables": true }, "aliases": { "components": "src/components", "utils": "src/utils" } }
```

---

```json
// public/manifestv3.json
{ "name": "betterUI", "description": "Better Ui for ChatGPT", "version": "0.0.1", "manifest_version": 3, "action": { "default_popup": "src/popup/popup.html", "default_title": "Open the popup" }, "permissions": ["storage", "activeTab", "scripting"], "host_permissions": ["https: "background": { "service_worker": "background.global.js" }, "icons": { "128": "vite.svg" }, "content_scripts": [ { "matches": ["https: "run_at": "document_end", "js": ["./index.global.js"], "css": ["./style.css"] } ] } 
```

---

```json
// public/manifest.json
{ "name": "Cat Facts", "description": "Learn random facts about cats", "version": "1.0.0", "manifest_version": 3, "action": { "default_popup": "index.html", "default_title": "Open the popup" }, "optional_permissions": [ "<all_urls>" ], "content_scripts": [ { "matches": [ "<all_urls>" ], "run_at": "document_end", "js": [ "./index.global.js" ], "css": [ "./style.css" ] } ], "background": { "page": "background.html" }, "icons": { "128": "logo128.png" } }
```

---

```markdown
// README.md
# The Idea A chrome extension to add custom features to the ChatGPT interface. ![Showcase](showcase.mov) ## Features - Add code blocks to the message input - [x] Python - [x] Typescript - [x] HTML - [x] Markdown - [x] Javascript - [x] C++ - [x] C - [x] Java - [] C# - [] Go - [] Rust - [] Ruby - [] PHP - Add custom prompts - [] prompts list - mange prompts - [] add - [] remove - [] edit - [] Add history to private chats 
```

---

```svg
// public/vite.svg
<svg xmlns="http: 
```

---

```typescript
// vite-env.d.ts
 
```

---

```typescript
// vite.config.ts
import { defineConfig } from "vite"; import react from "@vitejs/plugin-react"; export default defineConfig({ plugins: [ react(), ], build: { outDir: "dist", emptyOutDir: false, rollupOptions: { input: { index: new URL("./src/popup/popup.html", import.meta.url).pathname, background: new URL("./src/background/background.html", import.meta.url).pathname, }, }, }, }); 
```

---

```typescript
// src/utils.ts
 import { type ClassValue, clsx } from "clsx"; import { twMerge } from "tailwind-merge"; export function cn(...inputs: ClassValue[]) { return twMerge(clsx(inputs)); }
```

---

```typescript
// src/background/vite.chrome.background.config.ts
import { defineConfig } from "vite"; import react from "@vitejs/plugin-react"; import { resolve, join } from "path"; const root = process.cwd(); export default defineConfig({ plugins: [react()], build: { emptyOutDir: false, outDir: join(root, "dist"), lib: { formats: ["iife"], entry: resolve(__dirname, "./background.ts"), name: "Vite/React/TailwindCSS Plugin", }, rollupOptions: { output: { entryFileNames: "background.global.js", extend: true, }, }, }, }); 
```

---

```typescript
// src/background/background.ts
import browser from "webextension-polyfill"; browser.runtime.onMessage.addListener((msg) => { console.log("message received from content script: ", msg); }); 
```

---

```typescript
// src/content-script/vite.content.config.ts
import { resolve, join } from "path"; import { defineConfig } from "vite"; import react from "@vitejs/plugin-react"; const root = process.cwd(); export default defineConfig({ plugins: [react()], define: { "process.env": {}, }, build: { emptyOutDir: true, outDir: join(root, "dist"), lib: { formats: ["iife"], entry: resolve(__dirname, "./index.tsx"), name: "Vite/React/TailwindCSS Plugin", }, rollupOptions: { output: { entryFileNames: "index.global.js", extend: true, }, }, }, }); 
```

---

```typescript
// src/content-script/index.tsx
 import ReactDOM from "react-dom/client"; import "./index.css"; import { BsFiletypeHtml } from "react-icons/bs"; import { FaPython, FaMarkdown, FaJava } from "react-icons/fa"; import { SiTypescript, SiJavascript, SiC, SiCplusplus } from "react-icons/si"; import { BiText } from "react-icons/bi"; import CodeBlockButton from "../components/CodeBlockButton"; import { FC, useState } from "react"; import { cn } from "../utils"; const ToolBar: FC<{ children: React.ReactNode }> = ({ children }) => { return <div className="w-full">{children}</div>; }; const promptTextArea = document.getElementById("prompt-textarea") as HTMLTextAreaElement | null; if (promptTextArea) { const parent = promptTextArea.parentElement?.parentElement; if (!parent) { throw new Error("Parent element not found"); } const renderDivPromptTextArea = document.createElement("div"); renderDivPromptTextArea.id = "prompt-textarea-container"; parent.appendChild(renderDivPromptTextArea); const rootPromptTextArea = ReactDOM.createRoot(renderDivPromptTextArea); rootPromptTextArea.render( <ToolBar> <div className="max-w-[400px] rounded-md p-2 gap-x-2 overflow-x-scroll flex flex-row justify-between dark:text-white"> <CodeBlockButton textArea={promptTextArea} icon={<FaPython />} language="python" /> <CodeBlockButton textArea={promptTextArea} icon={<SiTypescript />} language="typeScript" /> <CodeBlockButton textArea={promptTextArea} icon={<BiText />} language="text" /> <CodeBlockButton textArea={promptTextArea} icon={<FaMarkdown />} language="markdown" /> <CodeBlockButton textArea={promptTextArea} icon={<BsFiletypeHtml />} language="html" /> <CodeBlockButton textArea={promptTextArea} icon={<SiJavascript />} language="javaScript" /> <CodeBlockButton textArea={promptTextArea} icon={<FaJava />} language="java" /> <CodeBlockButton textArea={promptTextArea} icon={<SiC />} language="c" /> <CodeBlockButton textArea={promptTextArea} icon={<SiCplusplus />} language="c++" /> </div> </ToolBar> ); } const chatHistoryPanel = document.querySelector('[aria-label="Chat history"]') as HTMLDivElement | null; if (chatHistoryPanel) { const renderDivChatHistoryPanel = document.createElement("div"); renderDivChatHistoryPanel.id = "chat-history-panel-container"; const secondToLastChild = chatHistoryPanel.lastElementChild?.previousElementSibling || chatHistoryPanel.lastElementChild; if (secondToLastChild) { chatHistoryPanel.insertBefore(renderDivChatHistoryPanel, secondToLastChild.nextSibling); } else { chatHistoryPanel.appendChild(renderDivChatHistoryPanel); } const rootChatHistoryPanel = ReactDOM.createRoot(renderDivChatHistoryPanel); rootChatHistoryPanel.render( <div className="h-[50vh] text-white w-full flex flex-col justify-center items-center border-gray-700 border rounded-xl my-4"> Offline History </div> ); } 
```

---

```typescript
// src/content-script/App.tsx
import React, { useRef } from "react"; import { FaPython } from "react-icons/fa"; import { SiTypescript } from "react-icons/si"; import CodeBlockButton from "../components/CodeBlockButton"; import ControlComponent from "../components/ControlComponent"; const App: React.FC = () => { const textArea = document.getElementById("prompt-textarea") as HTMLTextAreaElement | null; return ( <div> {textArea && ( <ControlComponent element={textArea}> <CodeBlockButton textArea={textArea} icon={<FaPython />} language="python" /> {/* TypeScript */} <CodeBlockButton textArea={textArea} icon={<SiTypescript />} language="typeScript" /> </ControlComponent> )} </div> ); }; export default App; 
```

---

```typescript
// src/components/ResponsiveOverlay.tsx
import React, { useState, useEffect, useCallback } from "react"; import { EyeOpenIcon, EyeClosedIcon } from "@radix-ui/react-icons"; import { throttle } from "lodash"; type HtmlElementOverlayProps = { element: HTMLElement; children: React.ReactNode; }; const ResponsiveOverlay: React.FC<HtmlElementOverlayProps> = ({ element, children, }) => { const [show, setShow] = useState<boolean>(false); const toggleShow = () => { setShow(!show); }; const [elementDimensions, setElementDimensions] = useState(element.getBoundingClientRect()); const handleResize = useCallback(throttle(() => { setElementDimensions(element.getBoundingClientRect()); }, 200), [element]); useEffect(() => { window.addEventListener("resize", handleResize); return () => { window.removeEventListener("resize", handleResize); }; }, [handleResize]); useEffect(() => { setElementDimensions(element.getBoundingClientRect()); }, [element]); return ( <div style={{ position: "absolute", top: `${elementDimensions.top}px`, left: `${elementDimensions.left}px`, width: show ? `${elementDimensions.width}px` : "40px", height: show ? `${elementDimensions.height}px` : "40px", }} className="z-50000 absolute isolate bg-slate-300 bg-opacity-90 flex flex-col justify-center items-center gap-8" > {show ? ( <button onClick={toggleShow} className="z-50001 w-40 h-40" aria-label="Hide overlay"> <EyeOpenIcon /> </button> ) : ( <button onClick={toggleShow} className="absolute top-1 left-1 w-40 h-40" aria-label="Show overlay"> <EyeClosedIcon /> </button> )} {show && children} </div> ); }; export default ResponsiveOverlay; 
```

---

```typescript
// src/components/Floater.tsx
import React from "react"; import { useState, useEffect, ReactNode, CSSProperties } from "react"; import { Button } from "../components/ui/button"; import { CrossCircledIcon } from "@radix-ui/react-icons"; import { cn } from "../utils"; type FloatingDivProps = { initialRight: string; initialBottom: string; className?: string; children: ReactNode; }; const Floater: React.FC<FloatingDivProps> = ({ children, initialRight, initialBottom, className, }) => { const [right, setRight] = useState<string>(initialRight); const [bottom, setBottom] = useState<string>(initialBottom); const [isDragging, setIsDragging] = useState(false); const [isMinimized, setIsMinimized] = useState(false); const [startX, setStartX] = useState(0); const [startY, setStartY] = useState(0); const checkBoundaries = (value: number, max: number): number => { if (value < 0) return 0; if (value > max) return max; return value; }; const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => { e.preventDefault(); setIsDragging(true); setStartX(e.clientX); setStartY(e.clientY); }; const handleSelectStart = (e: Event) => { if (isDragging) e.preventDefault(); }; const handleMouseUp = () => { setIsDragging(false); }; const handleMouseMove = (e: MouseEvent) => { if (!isDragging) return; const newRight = checkBoundaries( parseInt(right) + (startX - e.clientX), window.innerWidth, ); const newBottom = checkBoundaries( parseInt(bottom) + (startY - e.clientY), window.innerHeight, ); setRight(`${newRight}px`); setBottom(`${newBottom}px`); setStartX(e.clientX); setStartY(e.clientY); }; const handleToggleMinimize = () => { setIsMinimized(!isMinimized); }; useEffect(() => { document.addEventListener("mousemove", handleMouseMove); document.addEventListener("mouseup", handleMouseUp); document.addEventListener("selectstart", handleSelectStart as any); return () => { document.removeEventListener("mousemove", handleMouseMove); document.removeEventListener("mouseup", handleMouseUp); document.removeEventListener("selectstart", handleSelectStart as any); }; }, [isDragging, handleMouseMove, handleMouseUp, handleSelectStart]); return ( <div onMouseDown={handleMouseDown} className={cn( ` flex flex-col gap-4 items-center justify-center absolute z-[10000] p-2 shadow-lg bg-white text-black rounded-lg cursor-move ${isMinimized ? "opacity-30" : "bg-opacity-80"} transform transition duration-500 ease-in-out hover:shadow-2xl hover:-translate-y-1 hover:opacity-100 `, className, )} style={ { bottom, right, } as CSSProperties } > {isMinimized ? ( <Button onClick={handleToggleMinimize}>Show</Button> ) : ( <> <Button variant="destructive" className="absolute -top-4 -right-4" size="icon" onClick={handleToggleMinimize} aria-label="Close the floating panel" > <CrossCircledIcon /> </Button> {children} </> )} </div> ); }; export default Floater; 
```

---

```typescript
// src/components/ComboBox.tsx
import * as React from "react"; import { CaretSortIcon, CheckIcon } from "@radix-ui/react-icons"; import { cn } from "../utils"; import { Button } from "../components/ui/button"; import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, } from "../components/ui/command"; import { Popover, PopoverContent, PopoverTrigger, } from "../components/ui/popover"; export type ComboboxItem = { value: string; label: string; }; type ComboboxProps<T extends ComboboxItem> = { label: string; items: T[]; placeholder: string; noItemFoundText: string; selectedItem?: T; onItemSelect: (item: T | null) => void; }; export function Combobox<T extends ComboboxItem>({ label, items, placeholder, noItemFoundText, selectedItem, onItemSelect, }: ComboboxProps<T>) { const [open, setOpen] = React.useState(false); const handleSelect = (itemValue: string) => { onItemSelect( itemValue === selectedItem?.value ? null : items.find((item) => item.value === itemValue) || null, ); setOpen(false); }; return ( <div className="flex flex-col relative bg-gray-800 rounded-lg shadow-lg"> <label htmlFor="combobox" className="absolute -top-6 left-2 text-sm text-gray-700" > {label} </label> <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button id="combobox" variant="outline" role="combobox" aria-expanded={open} className="w-[200px] justify-between" > {selectedItem ? selectedItem.label : placeholder} <CaretSortIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" /> </Button> </PopoverTrigger> <PopoverContent className="w-[200px] p-0"> <Command> <CommandInput placeholder={placeholder} /> <CommandEmpty>{noItemFoundText}</CommandEmpty> <CommandGroup> {items.map((item) => ( <CommandItem key={item.value} onSelect={() => handleSelect(item.value)} > <CheckIcon className={cn( "mr-2 h-4 w-4", selectedItem?.value === item.value ? "opacity-100" : "opacity-0", )} /> {item.label} </CommandItem> ))} </CommandGroup> </Command> </PopoverContent> </Popover> </div> ); } export default Combobox; 
```

---

```typescript
// src/components/CodeBlockButton.tsx
import React from "react"; export type CodeBlockButtonProps = { textArea: HTMLTextAreaElement; icon: React.ReactNode; language: string; }; const codeTag = "```"; const newline = ` `; const CodeBlockButton: React.FC<CodeBlockButtonProps> = ({ textArea, icon, language }) => { return ( <div onClick={async () => { const selectionStart = textArea.selectionStart; const selectionEnd = textArea.selectionEnd; const selection = textArea.value.substring(selectionStart, selectionEnd); const before = textArea.value.substring(0, selectionStart); const after = textArea.value.substring(selectionEnd); textArea.value = before + codeTag + language + newline + selection + newline + codeTag + after; textArea.selectionStart = selectionStart + codeTag.length + language.length + 1; textArea.selectionEnd = selectionStart + codeTag.length + language.length + 1; textArea.focus(); textArea.dispatchEvent(new Event("input", { bubbles: true })); }} className="z-1 mt-4 my-2 rounded-md bg-gray-900 text-gray-300 px-2 py-2 hover:bg-opacity-100 hover:bg-slate-600 cursor-pointer" aria-label={language} > {icon} </div> ); }; export default CodeBlockButton; 
```

---

```typescript
// src/components/TextAreaControl.tsx
import React from "react"; type TextAreaControlProps = { textAreaElement: HTMLTextAreaElement; }; const TextAreaControl: React.FC<TextAreaControlProps> = ({ textAreaElement }) => { const handlePythonButtonClick = () => { const startTag = "```python\n"; const endTag = "```"; const value = textAreaElement.value; const cursorPosition = textAreaElement.selectionStart; textAreaElement.value = value.substring(0, cursorPosition) + startTag + endTag + value.substring(cursorPosition); textAreaElement.selectionStart = cursorPosition + startTag.length; textAreaElement.selectionEnd = cursorPosition + startTag.length; }; return ( <div className="toolbar"> <button onClick={handlePythonButtonClick}>Python</button> </div> ); }; export default TextAreaControl; 
```

---

```typescript
// src/components/ControlComponent.tsx
import React, { useCallback, useEffect, useState } from "react"; import { throttle } from "lodash"; type ControlComponentProps = { element: HTMLElement; children: React.ReactNode; }; const ControlComponent: React.FC<ControlComponentProps> = ({ element, children }) => { element.style.marginBottom = "40px"; const [elementDimensions, setElementDimensions] = useState(element.getBoundingClientRect()); const handleChange = useCallback( throttle(() => { setElementDimensions(element.getBoundingClientRect()); }, 200), [element] ); useEffect(() => { const observer = new MutationObserver(handleChange); const parent = element.parentElement; if (parent) observer.observe(element.parentElement as Node, { childList: true, subtree: true }); else observer.observe(element, { childList: true, subtree: true }); return () => observer.disconnect(); }, [element, handleChange]); useEffect(() => { setElementDimensions(element.getBoundingClientRect()); }, [element]); return ( <div style={{ top: `${elementDimensions.top + elementDimensions.height}px`, left: `${elementDimensions.left}px`, width: `${elementDimensions.width}px`, height: `1px`, }} className="absolute isolate z-1 flex flex-row justify-start gap-2 items-start px-2" > {children} </div> ); }; export default ControlComponent; 
```

---

```typescript
// src/components/ui/popover.tsx
import * as React from "react"; import * as PopoverPrimitive from "@radix-ui/react-popover"; import { cn } from "../../utils"; const Popover = PopoverPrimitive.Root; const PopoverTrigger = PopoverPrimitive.Trigger; const PopoverContent = React.forwardRef< React.ElementRef<typeof PopoverPrimitive.Content>, React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> >(({ className, align = "center", sideOffset = 4, ...props }, ref) => ( <PopoverPrimitive.Portal> <PopoverPrimitive.Content ref={ref} align={align} sideOffset={sideOffset} className={cn( "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className, )} {...props} /> </PopoverPrimitive.Portal> )); PopoverContent.displayName = PopoverPrimitive.Content.displayName; export { Popover, PopoverTrigger, PopoverContent }; 
```

---

```typescript
// src/components/ui/command.tsx
import * as React from "react"; import { DialogProps } from "@radix-ui/react-dialog"; import { MagnifyingGlassIcon } from "@radix-ui/react-icons"; import { Command as CommandPrimitive } from "cmdk"; import { cn } from "../../utils"; import { Dialog, DialogContent } from "./dialog"; const Command = React.forwardRef< React.ElementRef<typeof CommandPrimitive>, React.ComponentPropsWithoutRef<typeof CommandPrimitive> >(({ className, ...props }, ref) => ( <CommandPrimitive ref={ref} className={cn( "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground", className, )} {...props} /> )); Command.displayName = CommandPrimitive.displayName; interface CommandDialogProps extends DialogProps {} const CommandDialog = ({ children, ...props }: CommandDialogProps) => { return ( <Dialog {...props}> <DialogContent className="overflow-hidden p-0"> <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5"> {children} </Command> </DialogContent> </Dialog> ); }; const CommandInput = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Input>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input> >(({ className, ...props }, ref) => ( <div className="flex items-center border-b px-3" cmdk-input-wrapper=""> <MagnifyingGlassIcon className="mr-2 h-4 w-4 shrink-0 opacity-50" /> <CommandPrimitive.Input ref={ref} className={cn( "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50", className, )} {...props} /> </div> )); CommandInput.displayName = CommandPrimitive.Input.displayName; const CommandList = React.forwardRef< React.ElementRef<typeof CommandPrimitive.List>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.List> >(({ className, ...props }, ref) => ( <CommandPrimitive.List ref={ref} className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)} {...props} /> )); CommandList.displayName = CommandPrimitive.List.displayName; const CommandEmpty = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Empty>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty> >((props, ref) => ( <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} /> )); CommandEmpty.displayName = CommandPrimitive.Empty.displayName; const CommandGroup = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Group>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group> >(({ className, ...props }, ref) => ( <CommandPrimitive.Group ref={ref} className={cn( "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground", className, )} {...props} /> )); CommandGroup.displayName = CommandPrimitive.Group.displayName; const CommandSeparator = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Separator>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator> >(({ className, ...props }, ref) => ( <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} /> )); CommandSeparator.displayName = CommandPrimitive.Separator.displayName; const CommandItem = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Item>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item> >(({ className, ...props }, ref) => ( <CommandPrimitive.Item ref={ref} className={cn( "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className, )} {...props} /> )); CommandItem.displayName = CommandPrimitive.Item.displayName; const CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => { return ( <span className={cn( "ml-auto text-xs tracking-widest text-muted-foreground", className, )} {...props} /> ); }; CommandShortcut.displayName = "CommandShortcut"; export { Command, CommandDialog, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem, CommandShortcut, CommandSeparator, }; 
```

---

```typescript
// src/components/ui/dialog.tsx
import * as React from "react"; import * as DialogPrimitive from "@radix-ui/react-dialog"; import { Cross2Icon } from "@radix-ui/react-icons"; import { cn } from "../../utils"; const Dialog = DialogPrimitive.Root; const DialogTrigger = DialogPrimitive.Trigger; const DialogPortal = ({ className, ...props }: DialogPrimitive.DialogPortalProps) => ( <DialogPrimitive.Portal className={cn(className)} {...props} /> ); DialogPortal.displayName = DialogPrimitive.Portal.displayName; const DialogOverlay = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Overlay>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay> >(({ className, ...props }, ref) => ( <DialogPrimitive.Overlay ref={ref} className={cn( "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0", className, )} {...props} /> )); DialogOverlay.displayName = DialogPrimitive.Overlay.displayName; const DialogContent = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Content>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> >(({ className, children, ...props }, ref) => ( <DialogPortal> <DialogOverlay /> <DialogPrimitive.Content ref={ref} className={cn( "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full", className, )} {...props} > {children} <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"> <Cross2Icon className="h-4 w-4" /> <span className="sr-only">Close</span> </DialogPrimitive.Close> </DialogPrimitive.Content> </DialogPortal> )); DialogContent.displayName = DialogPrimitive.Content.displayName; const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( "flex flex-col space-y-1.5 text-center sm:text-left", className, )} {...props} /> ); DialogHeader.displayName = "DialogHeader"; const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className, )} {...props} /> ); DialogFooter.displayName = "DialogFooter"; const DialogTitle = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Title>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title> >(({ className, ...props }, ref) => ( <DialogPrimitive.Title ref={ref} className={cn( "text-lg font-semibold leading-none tracking-tight", className, )} {...props} /> )); DialogTitle.displayName = DialogPrimitive.Title.displayName; const DialogDescription = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Description>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description> >(({ className, ...props }, ref) => ( <DialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} /> )); DialogDescription.displayName = DialogPrimitive.Description.displayName; export { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogFooter, DialogTitle, DialogDescription, }; 
```

---

```typescript
// src/components/ui/button.tsx
import * as React from "react"; import { Slot } from "@radix-ui/react-slot"; import { cva, type VariantProps } from "class-variance-authority"; import { cn } from "../../utils"; const buttonVariants = cva( "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50", { variants: { variant: { default: "bg-primary text-primary-foreground shadow hover:bg-primary/90", destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90", outline: "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground", secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80", ghost: "hover:bg-accent hover:text-accent-foreground", link: "text-primary underline-offset-4 hover:underline", }, size: { default: "h-9 px-4 py-2", sm: "h-8 rounded-md px-3 text-xs", lg: "h-10 rounded-md px-8", icon: "h-9 w-9", }, }, defaultVariants: { variant: "default", size: "default", }, }, ); export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> { asChild?: boolean; } const Button = React.forwardRef<HTMLButtonElement, ButtonProps>( ({ className, variant, size, asChild = false, ...props }, ref) => { const Comp = asChild ? Slot : "button"; return ( <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} /> ); }, ); Button.displayName = "Button"; export { Button, buttonVariants }; 
```

---

```typescript
// src/components/ui/toast.tsx
import * as React from "react"; import { Cross2Icon } from "@radix-ui/react-icons"; import * as ToastPrimitives from "@radix-ui/react-toast"; import { cva, type VariantProps } from "class-variance-authority"; import { cn } from "../../utils"; const ToastProvider = ToastPrimitives.Provider; const ToastViewport = React.forwardRef< React.ElementRef<typeof ToastPrimitives.Viewport>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport> >(({ className, ...props }, ref) => ( <ToastPrimitives.Viewport ref={ref} className={cn( "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]", className, )} {...props} /> )); ToastViewport.displayName = ToastPrimitives.Viewport.displayName; const toastVariants = cva( "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full", { variants: { variant: { default: "border bg-background", destructive: "destructive group border-destructive bg-destructive text-destructive-foreground", }, }, defaultVariants: { variant: "default", }, }, ); const Toast = React.forwardRef< React.ElementRef<typeof ToastPrimitives.Root>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants> >(({ className, variant, ...props }, ref) => { return ( <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} /> ); }); Toast.displayName = ToastPrimitives.Root.displayName; const ToastAction = React.forwardRef< React.ElementRef<typeof ToastPrimitives.Action>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action> >(({ className, ...props }, ref) => ( <ToastPrimitives.Action ref={ref} className={cn( "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive", className, )} {...props} /> )); ToastAction.displayName = ToastPrimitives.Action.displayName; const ToastClose = React.forwardRef< React.ElementRef<typeof ToastPrimitives.Close>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close> >(({ className, ...props }, ref) => ( <ToastPrimitives.Close ref={ref} className={cn( "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600", className, )} toast-close="" {...props} > <Cross2Icon className="h-4 w-4" /> </ToastPrimitives.Close> )); ToastClose.displayName = ToastPrimitives.Close.displayName; const ToastTitle = React.forwardRef< React.ElementRef<typeof ToastPrimitives.Title>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title> >(({ className, ...props }, ref) => ( <ToastPrimitives.Title ref={ref} className={cn("text-sm font-semibold [&+div]:text-xs", className)} {...props} /> )); ToastTitle.displayName = ToastPrimitives.Title.displayName; const ToastDescription = React.forwardRef< React.ElementRef<typeof ToastPrimitives.Description>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description> >(({ className, ...props }, ref) => ( <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} /> )); ToastDescription.displayName = ToastPrimitives.Description.displayName; type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>; type ToastActionElement = React.ReactElement<typeof ToastAction>; export { type ToastProps, type ToastActionElement, ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction, }; 
```